{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Codeed Framework","text":"<p>Welcome Codeed Framework</p>"},{"location":"concepts/entity/","title":"What is an entity?","text":"<p>An entity is an object, person, place, thing, or concept that can be distinctly and clearly identified in a system or data model. In the context of databases and information management systems, an entity is often used to represent a class of objects or concepts, such as customers, products, sales, or financial transactions.</p> <p>Entities are typically defined through a set of attributes that describe their characteristics and properties. For example, an \"customer\" entity may have attributes such as name, address, phone number, and email address. Each instance or occurrence of this entity would have specific values for these attributes, such as \"John Smith\", \"123 Main St\", \"(555) 555-5555\", and \"john.smith@email.com\".</p> <p>Entities can be related to each other through relationships, which are used to describe how entities interact with each other. For example, a \"order\" entity may be related to a \"customer\" entity through a \"placed\" relationship, indicating that the order was placed by the customer.</p>"},{"location":"concepts/entity/#entity-example","title":"Entity example","text":"<pre><code>public class Customer : Entity, IAggregateRoot\n{\nprotected Customer() { }\n\npublic Customer(string name, string address, string phoneNumber, string emailAddress)\n{\nName = name;\nAddress = address;\nPhoneNumber = phoneNumber;\nEmailAddress = emailAddress;\n}\n\npublic string Name { get; private set; }\npublic string Address { get; private set; }\npublic string PhoneNumber { get; private set; }\npublic string EmailAddress { get; private set; }\n}\n</code></pre>"},{"location":"concepts/entity/#what-is-aggregation-root","title":"What is aggregation root?","text":"<p>The aggregate root is an important concept in software domain modeling. It is an entity that is responsible for a set of related objects, and it is the only entity that is referenced by other entities outside the scope of the set. In other words, the aggregate root is the main entity that contains and manages a set of related entities.</p> <p>In practice, the aggregation root is a class that encapsulates related classes, which are called aggregates. This structure allows the aggregate classes to be managed as a cohesive set, with the aggregation root being responsible for ensuring that business rules are correctly applied throughout the set.</p> <p>A common example of an aggregation root is a purchase order in an e-commerce system. The order would be the aggregation root, with aggregates such as purchase items, payment information, and shipping information. The aggregation root would be responsible for ensuring that all the information related to the order is correct and that business rules, such as payment restrictions and shipping calculations, are correctly applied throughout the set.</p> <p>In summary, the aggregation root is a primary entity that contains and manages a set of related entities, called aggregates. The aggregation root is responsible for ensuring that business rules are applied correctly throughout the set and is the only entity referenced by other entities outside the scope of the set. The use of this concept is essential for the development of more cohesive and scalable software systems.</p>"},{"location":"learn/first_service/entity/","title":"Developing your First Entity","text":""},{"location":"learn/getting_started/configuring_project/","title":"Configuring the Project","text":"<p>In this guide, we will walk you through how to modify your Program.cs file to authenticate using Firebase, connect to both PostgreSQL and MongoDB databases, create an API documentation page and register the Codeed.Framework services.</p>"},{"location":"learn/getting_started/configuring_project/#programcs-in-aspnet-minimal-api-project","title":"Program.cs in ASP.NET Minimal API Project","text":"<p>Program.cs is a key file in an ASP.NET Minimal API Project. It is the entry point of the application and is responsible for configuring and running the application.</p> <p>In this section, we will go through the code in Program.cs line by line to explain what each line does.</p> <pre><code>var builder = WebApplication.CreateBuilder(args);\n</code></pre> <p>This line creates a new instance of the WebApplication class and initializes it with the command-line arguments passed to the application.</p> <pre><code>builder.Services.AddControllers();\n</code></pre> <p>This line adds the Controllers feature to the application. This feature allows you to define controllers to handle HTTP requests.</p> <pre><code>builder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n</code></pre> <p>These two lines add support for Swagger/OpenAPI documentation to the application. Swagger/OpenAPI is a tool that allows you to document your APIs and generate client libraries in multiple languages.</p> <pre><code>var app = builder.Build();\n</code></pre> <p>This line builds the WebApplication instance and returns it as an IApplicationBuilder instance. This IApplicationBuilder instance is used to configure the application's request processing pipeline.</p> <pre><code>if (app.Environment.IsDevelopment())\n{\napp.UseSwagger();\napp.UseSwaggerUI();\n}\n</code></pre> <p>This block of code adds Swagger/OpenAPI middleware to the application only if it's running in the development environment. The middleware is responsible for generating the Swagger/OpenAPI documentation and serving it to clients.</p> <pre><code>app.UseHttpsRedirection();\n</code></pre> <p>This line adds middleware to redirect HTTP requests to HTTPS if the application is running on a secure server.</p> <pre><code>app.UseAuthorization();\n</code></pre> <p>This line adds middleware to enable authentication and authorization for the application. This middleware is responsible for enforcing access control rules on incoming requests.</p> <pre><code>app.MapControllers();\n</code></pre> <p>This line maps the controllers defined in the application to the incoming HTTP requests. This enables the application to route requests to the appropriate controller based on the request URL and HTTP verb.</p> <pre><code>app.Run();\n</code></pre> <p>This line starts the application and runs it indefinitely. This is the last line of code in the Program.cs file.</p>"},{"location":"learn/getting_started/configuring_project/#install-postgresql-packages","title":"Install PostgreSQL packages","text":"<p>The Codeed.Framework utilizes EntityFramework as an Object-Relational Mapping (ORM) tool, which allows developers to work with different databases in their application. For our specific example, we have decided to use PostgreSQL as our database management system. In order to incorporate PostgreSQL into the Learn.Web project, it is necessary to install a specific package. This package will provide the necessary tools and functionalities for the Learn.Web project to interface with the PostgreSQL database.</p> Learn.WebLearn.Data <pre><code>Install-Package Npgsql.EntityFrameworkCore.PostgreSQL\n</code></pre> <pre><code>Install-Package Npgsql.EntityFrameworkCore.PostgreSQL\n</code></pre>"},{"location":"learn/getting_started/configuring_project/#changing-the-programcs","title":"Changing the Program.cs","text":"<p>Configure Serilog</p>"},{"location":"learn/getting_started/creating_project/","title":"Creating .NET Project","text":"<p>This documentation page will guide you through the steps to create a new ASP.NET Core Web API project on Visual Studio and configure it to use Codeed Framework.</p>"},{"location":"learn/getting_started/creating_project/#creating-project-on-visual-studio","title":"Creating project on Visual Studio","text":"<ul> <li> Launch the Visual Studio IDE on your computer.</li> <li> Click on \"Create a new project\" on the start page or go to File -&gt; New -&gt; Project.</li> <li> Select the \"ASP.NET Core Web API\" template under the \"Create a new project\" window. Choose \"Next.\"</li> <li> Name the project <code>Learn.Web</code> and choose a location on your computer where you want to save the project files. Choose \"Create.\"</li> <li> In the \"Additional Information\" window, select \".NET 6\" under the \"Target Framework\" dropdown. Choose \"Create.\"</li> </ul> <p>You can delete the WeatherForecast class as well as its controller</p>"},{"location":"learn/getting_started/creating_project/#adding-projects-to-the-solution","title":"Adding Projects to the Solution","text":"<p>In addition to the Learn.Web project, we will also create the following projects to organize the solution and separate concerns:</p>"},{"location":"learn/getting_started/creating_project/#learndomain","title":"Learn.Domain","text":"<p>This project will contain the domain models, interfaces, and any domain logic. This layer represents the core of the application.</p> <p>To create the Learn.Domain project:</p> <ul> <li> Right-click on the solution in Solution Explorer and select \"Add\" -&gt; \"New Project.\"</li> <li> Select the \"Class Library\" template under the \".NET\" category. Choose \"Next.\"</li> <li> Name the project Learn.Domain and choose a location on your computer where you want to save the project files. Choose \"Create.\"</li> <li> In the \"Additional Information\" window, select \".NET 6\" under the \"Target Framework\" dropdown. Choose \"Create.\"</li> <li> Remove Class1.cs</li> </ul>"},{"location":"learn/getting_started/creating_project/#learnapplication","title":"Learn.Application","text":"<p>This project will contain the application logic, which includes the services, commands, queries, and any other business logic specific to the application.</p> <ul> <li> To create the <code>Learn.Application</code> project, repeat the same steps as in <code>Learn.Domain</code>, but with the name changed to <code>Learn.Application</code>.</li> </ul>"},{"location":"learn/getting_started/creating_project/#learndata","title":"Learn.Data","text":"<p>This project will contain the data access logic, including the database context, repositories, and data models.</p> <ul> <li> To create the <code>Learn.Data</code> project, repeat the same steps as in <code>Learn.Domain</code>, but with the name changed to <code>Learn.Data</code>.</li> </ul>"},{"location":"learn/getting_started/creating_project/#install-codeedframework-packages","title":"Install Codeed.Framework packages","text":"<ul> <li> Install the NuGet packages according to the project:</li> </ul> Learn.WebLearn.DomainLearn.DataLearn.Application <pre><code>Install-Package Codeed.Framework.AspNet\n</code></pre> <pre><code>Install-Package Codeed.Framework.Domain\nInstall-Package Codeed.Framework.Data\n</code></pre> <pre><code>Install-Package Codeed.Framework.Data\n</code></pre> <pre><code>Install-Package Codeed.Framework.AspNet\nInstall-Package Codeed.Framework.Models\nInstall-Package Codeed.Framework.Services\nInstall-Package Codeed.Framework.Services.Http\n</code></pre>"},{"location":"learn/getting_started/creating_project/#referencing-projects","title":"Referencing Projects","text":"<ul> <li> Reference the projects to establish the following relationships:</li> </ul> Learn.WebLearn.DataLearn.Application <p>Add <code>Learn.Application</code> to the projects references</p> <p>Add <code>Learn.Domain</code> to the projects references</p> <p>Add <code>Learn.Domain</code> to the projects references</p> <p>Add <code>Learn.Data</code> to the projects references</p> <p>By following the instructions, you should arrive at a solution that looks like the one in the image below:</p> <p></p>"},{"location":"learn/getting_started/environment/","title":"Environment","text":"<p>The environment section of this documentation will guide you through the process of creating Firebase Authentication for your web app, as well as setting up the databases Postgres and MongoDB. Firebase Authentication allows you to easily add user authentication and authorization to your web app, while Postgres and MongoDB are powerful and widely-used databases that can store and manage your app's data. By following the steps outlined in this section, you'll be able to create a secure and reliable authentication system for your web app and set up your databases to efficiently manage your data. We'll cover everything from creating a Firebase project and obtaining authentication keys to setting up and configuring Postgres and MongoDB, so that you can get up and running quickly and easily. Let's get started!</p>"},{"location":"learn/getting_started/environment/#create-firebase-project","title":"Create Firebase Project","text":"<ul> <li> <p> Go to the Firebase Console at https://console.firebase.google.com/ and sign in with your Google account.</p> </li> <li> <p> Click on the \"Add Project\" button and enter \"Learn\" as the project name.</p> </li> <li> <p> Follow the prompts to set up your project</p> </li> <li> <p> Once your project is created, click on the \"Web\" button to add a web app to your project.</p> </li> <li> <p> Give your web app a name and click on the \"Register App\" button.</p> </li> </ul> <p>You will be given a set of configuration keys for your web app, including a Firebase configuration object that includes your API key, auth domain and projectId:</p> <pre><code>{\napiKey: \"...\",\nauthDomain: \"learn-8bddb.firebaseapp.com\",\nprojectId: \"learn-8bddb\",\nstorageBucket: \"learn-8bddb.appspot.com\",\nmessagingSenderId: \"...\",\nappId: \"...\"\n};\n</code></pre>"},{"location":"learn/getting_started/environment/#databases","title":"Databases","text":"<ul> <li> <p> In your Learn.Web project directory, create a new file called <code>docker-compose.yml</code>.</p> </li> <li> <p> Open the docker-compose.yml file in a text editor and copy-paste the following code:</p> </li> </ul> <pre><code>version: '3.1'\n\nservices:\n\n   mongo:\n     image: mongo\n     container_name: mongo-db-learn\n     restart: always\n     ports:\n       - 27017:27017\n     environment:\n       MONGO_INITDB_ROOT_USERNAME: root\n       MONGO_INITDB_ROOT_PASSWORD: mongodb\n\n   mongo-express:\n     image: mongo-express\n     container_name: mongo-express-learn\n     restart: always\n     ports:\n       - 8081:8081\n     environment:\n       ME_CONFIG_MONGODB_ADMINUSERNAME: root\n       ME_CONFIG_MONGODB_ADMINPASSWORD: mongodb\n       ME_CONFIG_MONGODB_URL: mongodb://root:mongodb@mongo:27017/\n\n   postgredb:\n     image: postgres\n     container_name: postgres-learn\n     ports:\n       - 5432:5432\n     environment:\n       POSTGRES_PASSWORD: postgres\n</code></pre> <ul> <li> <p> Save the docker-compose.yml file.</p> </li> <li> <p> Open a terminal or command prompt and navigate to the directory where the docker-compose.yml file is located.</p> </li> <li> <p> Run the following command to start the containers:</p> </li> </ul> <pre><code>docker-compose up -d\n</code></pre> <p>This command will download the necessary images and create the MongoDB and Postgres containers.</p>"},{"location":"learn/getting_started/introduction/","title":"Introduction","text":"<p>Welcome to the documentation of Codeed.Framework. This is a software development framework for .NET that aims to facilitate the creation of scalable and high-quality applications. Codeed.Framework uses concepts of Domain-Driven Design (DDD) and hexagonal architecture to allow developers to create robust and well-structured systems.</p> <p>This documentation was created to help you learn how to use Codeed.Framework and create your own applications. It is divided into sections that will guide you through the process of creating a system using the framework.</p>"},{"location":"learn/getting_started/introduction/#what-will-we-learn","title":"What will we learn","text":"<p>In this documentation, we will learn how to use Codeed.Framework to create a complete system. The topics covered include:</p> <ul> <li>Creating a backend project using Visual Studio</li> <li>Configuring the project to use Codeed.Framework</li> <li>Creating an entity to represent the system data</li> <li>Creating entity mappings to allow persistence in the database</li> <li>Creating contexts and repositories to access the system data</li> <li>Creating CRUD services to perform basic operations in the system</li> </ul> <p>With the knowledge gained in this documentation, you will be able to use Codeed.Framework in your own projects and create scalable and high-quality systems. Let's get started!</p>"}]}